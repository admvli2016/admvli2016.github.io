{"pages":[],"posts":[{"title":"Ionic5.x+Capacitor+Vue3.x 尝鲜（Android）","text":"发现 ionic 最新版本支持了 Vue3.x，于是赶紧下载来尝尝鲜! 环境和版本 1234Windows 10 64位node v12.22.0@ionic/cli v6.16.3Android Studio v4.2.2 创建 ionic5.x 项目1.1 创建项目，使用 Ionic 官网的快捷创建方式，生成模板代码，并将代码推到自己的 github 上 https://ionicframework.com/start#basics https://dashboard.ionicframework.com/app/1982d30d/getting-started/overview 123456# 安装 @ionic/cli 和 cordova-resnpm install -g @ionic/cli cordova-res# 拉取刚才创建的 ionic 项目git clone https://github.com/admvli2016/my-ionic-app-1.git my-ionic-app-1# 进入项目目录 &amp;&amp; 安装依赖 &amp;&amp; 运行项目cd my-ionic-app-1 &amp;&amp; npm install &amp;&amp; ionic serve Android 环境配置SDK Manager 的 Sdk 安装路径是: C:\\Users\\admvli2016\\AppData\\Local\\Android\\Sdk 2.1 下载最新版本的 Android Studio ( v4.2.2 )，然后安装 2.2 在 Android Studio 中配置 Android Sdk（更改 Android Sdk 配置后需要重新运行、打包项目） 打开 Android Studio 并按照下列步骤操作： 出现以下弹窗，点击 OK 继续 出现如下页面，安装完成后，点击 Finish 切换到 SDK Tools 选项卡 同上，出现如下页面，安装完成后，点击 Finish 在 Android Studio 中打开项目（1）123456# 安装 @capacitor/android 插件npm install @capacitor/android# 添加 android 平台npx cap add android# 在 Android Studio 中打开项目npx cap open android 运行报错：卡在这里了，只好选择重新创建项目，现在回想一下应该是没有运行 ionic build 12345Settings file 'D:\\Github\\my-ionic-app\\android\\settings.gradle' line: 5A problem occurred evaluating settings 'android'.&gt; Could not read script 'D:\\Github\\my-ionic-app\\android\\capacitor.settings.gradle' as it does not exist.......Caused by: org.gradle.api.resources.MissingResourceException: Could not read script 'D:\\Github\\my-ionic-app\\android\\capacitor.settings.gradle' as it does not exist. 以命令行形式重新创建 ionic5.x 项目执行以下命令 123456789101112131415# 安装全局依赖 @ionic/cli@latest、native-run、cordova-resnpm install -g @ionic/cli@latest native-run cordova-res# 创建项目（关闭vpn，否则会报错）ionic start ionic5-vue3-demo tabs# 运行项目ionic serve# 打包项目ionic build# 添加平台 ios/android 文件夹（本机项目）ionic cap add iosionic cap add android# 每次执行完 ionic build（有更新） 之后，都需要执行以下命令，将更改复制到本机项目ionic cap copy || ionic cap update# 对代码的本机部分进行更新（例如添加新插件）后，使用以下 sync 命令ionic cap sync 在 Android Studio 中打开项目（2）12# 打开 android 项目 ionic cap open android 系统 gradle 配置路径：C:\\Users\\admvli2016.gradle\\gradle.properties 运行报错： 原因：Android Studio 存在版本问题，老版本的 Android Studio 可能需要代理设置才能够使用，所以前几年网上关于这个问题的博文都是说需要设置代理。但是由于自己安装的是最新版本的 Android Studio，不需要代理就能够使用，所以这里也算是踩了一个坑！ (3条消息) 解决Android Studio 无法通过gradle 下载https://dl.google.com/android/repository/addons_list-3.xml 解决办法_Ansel_i的博客-CSDN博客 解决方案：关闭 VPN，删除掉所有代理设置 在 Android Studio 中打开 “设置 HTTP Proxy” 页面的快捷键 Ctrl +Alt + S 运行项目并安装到真机上6.1 在 Android Studio上选择要安装的设备 若找不到设备，选择 Troubule Shoot Device Connections，按步骤一步一步来即可找到设备 6.2 点击运行 ▸ 安装到真机上失败 123456Installation did not succeed.The application could not be installed: INSTALL_FAILED_TEST_ONLYList of apks:[0] 'D:\\Github\\ionic5-vue3-demo\\android\\app\\build\\outputs\\apk\\debug\\app-debug.apk'Installation failed due to: 'null' (3条消息) Android 安装APP 失败 INSTALL_FAILED_TEST_ONLY_爱孔孟-CSDN博客 解决方案：在 gradle.properties 文件中添加如下内容 1android.injected.testOnly=false 重新运行，安装到真机成功！！！ 在 Android Studio 中将程序打包成 APK(3条消息) 在Android Studio中如何将程序打包成APK_StevenAzy的博客-CSDN博客_android studio怎么打包成apk 在 Android Studio 中打开项目，按照下列步骤进行操作 如果之前有编译成 APK 的话，就直接选择 Choose existing key 如果没有编译成 APK 的， 那就选择 Create new key 选择新的 key 的存放路径，点击 OK 继续 填上密码，其中 First and Last Name 填一下，其他的可不填。 点击 OK 继续下一步 点击 Next 继续下一步（这一步不能够记住密码，否则可能会导致之后 build 报错） 点击 Finish，最终生成的 APK 文件就在下图所示的路径中 打包成功！！！ 注意：再次打包时需要将之前打包生成的 release 或 debug 文件夹删除，才能看到效果","link":"/2021/12/10/Ionic5-x-Capacitor-Vue3-x-%E5%B0%9D%E9%B2%9C%EF%BC%88Android%EF%BC%89/"},{"title":"Ionic5.x+Capacitor+Vue3.x 集成极光推送（Android）","text":"参考博文： ionic快速集成极光推送 · dicallc/ionic3_angular4_JD Wiki 安装 cordova-plugin-jpush-capacitor12345# 安装 cordova-plugin-jpush-capacitornpm i cordova-plugin-jpush-capacitor # 同步至 ios / android 平台ionic cap sync 报缺少依赖错误： 123cordova-plugin-jpush-capacitor is missing dependencies:[capacitor] - cordova-plugin-device[capacitor] - cordova-plugin-jcore 安装 cordova-plugin-device，运行如下命令： 12npm install cordova-plugin-deviceionic cap sync 安装 cordova-plugin-jcore，运行如下命令： 12npm install cordova-plugin-jcore ionic cap sync 查看插件列表： 1npx cap ls 更改 appId 和 appName修改下列文件中的 appId 和 appName 12345678// ionic.config.json{ &quot;name&quot;: &quot;因思工业服务&quot;, &quot;integrations&quot;: { &quot;capacitor&quot;: {} }, &quot;type&quot;: &quot;vue&quot;} 1234567// capacitor.config.json{ &quot;appId&quot;: &quot;com.ionicframework.xxxxxx&quot;, &quot;appName&quot;: &quot;因思工业服务&quot;, &quot;webDir&quot;: &quot;dist&quot;, &quot;bundledWebRuntime&quot;: false} 删除 android 和 ios platform 后重新添加再打包（避免缓存） 12345678910111213141516# 安装 rimrafnpm install -g rimraf# 删除 android 文件夹rimraf android# 删除 ios 文件夹rimraf ios# 添加 android 平台npx cap add android# 添加 ios 平台npx cap add ios# 打包ionic build# 同步至 ios / android 平台ionic cap sync# 在 Android Studio 中打开项目ionic cap open android 在 AndroidManifest.xml 文件中添加极光推送的 AppKey极光后台：https://www.jiguang.cn/portal/#/dev/ 可在极光开发者服务后台 &gt; 应用管理 &gt; 应用设置 &gt; 应用信息中查看 AppKey 不要忘记在 gradle.properties 文件中添加： 1android.injected.testOnly=false 添加示例程序12345678910111213141516171819202122232425262728293031323334353637383940414243444546// src/utils/jpush.tsimport { isPlatform } from '@ionic/vue'; class Jpush { jpush: any; constructor() { if (window.JPush) { this.jpush = window.JPush; this.jpush.setDebugMode(true); if (isPlatform('ios')) { this.jpush.startJPushSDK(); } this.jpush.init(); } } getRegistrationID() { return new Promise(resolve =&gt; { this.jpush.getRegistrationID(function (rId: string) { resolve(rId); // console.log(&quot;JPushPlugin:registrationID is &quot; + rId); }) }) } // 设置别名 setAlias(alias: string) { return new Promise(((resolve, reject) =&gt; { this.jpush.setAlias({ alias, sequence: new Date().valueOf() }, (res: { alias: string; sequence: number }) =&gt; { // console.log('别名设置成功: ', res); resolve(res); }, (err: { code: number; sequence: number }) =&gt; { // console.log('别名设置失败: ', err); setTimeout(() =&gt; this.setAlias(alias), 3000); reject(err); }); })) } // 设置角标 只限IOS setBadge(badge: number) { if (isPlatform('ios')) { this.jpush.setBadge(badge); } }}export default Jpush 12345678910111213141516171819202122232425262728293031&lt;!-- App.vue --&gt;&lt;template&gt; &lt;ion-app&gt; &lt;ion-router-outlet /&gt; &lt;/ion-app&gt;&lt;/template&gt;&lt;script lang=&quot;ts&quot;&gt;import { Plugins } from &quot;@capacitor/core&quot;;import { defineComponent, onMounted } from 'vue';import { IonApp, IonRouterOutlet } from '@ionic/vue';import jpush from &quot;@/utils/jpush&quot;;const { SplashScreen } = Plugins;export default defineComponent({ name: 'App', components: { IonApp, IonRouterOutlet }, setup() { onMounted(() =&gt; { // 由于是cordova插件，需要在deviceready回调后才能使用，用过Cordova的都懂 document.addEventListener('deviceready', () =&gt; { new jpush().setAlias('app'); }) setTimeout(() =&gt; SplashScreen.hide(), 2000); }) }});&lt;/script&gt; 极光后台模拟推送通知极光后台：https://www.jiguang.cn/portal/#/dev/ 5.1 创建推送信息 设置平台、标题、内容、发送时间 5.2 选择发送给哪些人 5.3 发送推送消息 5.4 确认发送 5.5 在 App 上查看是否收到推送通知 测试极光推送是否集成成功重新打包，在 Android Studio 中运行项目并将其安装到手机上 每次重新打包之后都需要去配置极光插件的 AppKey，之前的配置将会被清除 安装过程中，Android Studio 控制台报错如下： 原因是没有给 App 授予通知权限（记住一定要给 App 授予通知权限） 授予通知权限后，在极光后台上模拟推送一条通知，发现手机上还是接收不到 极光后台报错提示如下： 可能是此时设置的设备别名（alias）有问题，将其改为自己的用户ID 190395486111268864 12345// App.vuedocument.addEventListener('deviceready', () =&gt; { // 设置为 190395486111268864 new jpush().setAlias('190395486111268864');}) 重新打包并安装到手机上（需要将之前安装的 APP 删掉），记得授予通知权限 如下图所示，极光推送集成成功！！！ 测试 App(Android) 处于不同状态时的推送机制 Android（Demo） 前台模式 后台模式 关闭 是否推送 推送 不推送 不推送 Android（线上App） 前台模式 后台模式 关闭 是否推送 推送 推送 不推送 怎么让 Demo 进入后台模式也可进行推送发现将 AndroidManifest.xml 中的配置放在 capacitor-cordova-android-plugins 文件夹中，App 进入后台模式就接收不到推送；而将其放到 app 文件夹中，进入后台模式也可接收到推送 1234567&lt;!-- app/manifests/AndroidManifest.xml --&gt;&lt;!-- 将极光推送配置粘贴到 &lt;/application&gt; --&gt;&lt;application&gt;...&lt;meta-data android:name=&quot;JPUSH_CHANNEL&quot; android:value=&quot;developer-default&quot;/&gt;&lt;meta-data android:name=&quot;JPUSH_APPKEY&quot; android:value=&quot;AppKey&quot;/&gt;&lt;/application&gt; 12345&lt;!-- capacitor-cordova-android-plugins/manifests/AndroidManifest.xml --&gt;&lt;!-- 删除掉下面两句这里每次运行 ionic cap sync 时，都会重新生成，所以在打包之前需要检查下，否则 ionic build 会报错 --&gt;&lt;meta-data android:name=&quot;JPUSH_CHANNEL&quot; android:value=&quot;developer-default&quot;/&gt;&lt;meta-data android:name=&quot;JPUSH_APPKEY&quot; android:value=&quot;AppKey&quot;/&gt;","link":"/2021/12/11/Ionic5-x-Capacitor-Vue3-x-%E9%9B%86%E6%88%90%E6%9E%81%E5%85%89%E6%8E%A8%E9%80%81%EF%BC%88Android%EF%BC%89/"},{"title":"nvm 安装与使用","text":"nvm 安装（Windows）1.1 下载安装包 1.2 选择自定义安装目录，例如 D:\\Software\\nvm 1.3 设置 nodejs 的安装存储目录，例如 D:\\Software\\nvm\\nodejs 1.4 查看 nvm 是否安装成功 12# 查看 nvm 版本nvm version 1.5 配置 node 和 npm 的镜像地址 1234# 配置 node 镜像地址nvm node_mirror https://npm.taobao.org/mirrors/node/# 配置 npm 镜像地址nvm npm_mirror https://npm.taobao.org/mirrors/npm/ 1.6 打开安装目录 D:\\Software\\nvm，新建一个文件夹 nodejs 1.7 设置环境变量 用户变量：将 NVM_SYMLINK 变量值改为 D:\\Software\\nvm\\nodejs 系统变量：将 NVM_SYMLINK 变量值改为 D:\\Software\\nvm\\nodejs 1.8 关闭 cmd 或 powershell，然后重新打开，这一步的目的是为了使环境变量生效 1.9 安装 node 版本 12345678910# 查看可安装的 node 版本列表nvm list available# 安装 node v14.17.3nvm install 14.17.3# 切换 node 版本nvm use 14.17.3# 查看 node 版本node -v# 查看 npm 版本npm -v 1.10 设置 npm 全局依赖在各 node 版本之间共享（安装全局依赖使用 npm i xxx -g） （1）用 npm root -g 命令，可查看 npm 全局依赖默认的存储位置 默认的 npm 全局依赖安装目录：C:\\Users\\admvli2016\\AppData\\Roaming\\npm 默认的 npm 全局依赖缓存目录：C:\\Users\\admvli2016\\AppData\\Roaming\\node_cache （2）修改 npm 全局依赖安装目录、npm 全局依赖缓存目录 在 D:\\Software\\nvm 文件夹下创建 node_global 和 node_cache 文件夹 1234# 修改 npm 全局依赖安装目录：npm config set prefix &quot;D:\\Software\\nvm\\node_global&quot;# 修改 npm 全局依赖缓存目录：npm config set cache &quot;D:\\Software\\nvm\\node_cache&quot; 这样做的目的主要为了避免在不同 node 版本下都安装一遍需要的 npm 全局依赖 若需要安装的 npm 全局依赖之间存在版本冲突等不兼容问题（如一个项目依赖 ionic/cli@3.9.2 ，另一个项目依赖 ionic/cli@6.16.3），则不建议采取上述策略。可按步骤（3）操作 （3）修改 npm 全局依赖安装目录、npm 全局依赖缓存目录（可选） 在 D:\\Software\\nvm\\nodejs 文件夹下创建 node_global 和 node_cache 文件夹 1234# 修改 npm 全局依赖安装目录：npm config set prefix &quot;D:\\Software\\nvm\\nodejs\\node_global&quot;# 修改 npm 全局依赖缓存目录：npm config set cache &quot;D:\\Software\\nvm\\nodejs\\node_cache&quot; 这样做的缺点是对于常用的 npm 全局依赖需要在所有需要的 node 版本下都安装一遍。 1.11 设置系统变量 （1）新增环境变量 NODE_PATH D:\\Software\\nvm\\node_global\\node_modules （2）在 PATH 变量上添加 D:\\Software\\nvm\\node_global 若上一步进行了操作（3），这一步也需要相应地更改文件夹路径。 新增环境变量 NODE_PATH D:\\Software\\nvm\\nodejs\\node_global\\node_modules 在 PATH 变量上添加 D:\\Software\\nvm\\nodejs\\node_global 1.12 设置淘宝镜像 12# 设置淘宝镜像npm config set registry=http://registry.npm.taobao.org 1.13 nvm 常用命令 1234567891011121314151617181920# 查看当前系统是 32bit 还是 64bitnvm arch # 安装 xxx 版本的 node（32bit / 64bit）nvm install xxx [arch] # 查看可安装的 node 版本列表nvm list available # 查看已安装的 node 版本列表nvm list / nvm list installed # 配置 node 镜像地址nvm node_mirror [url] # 配置 npm 镜像地址nvm npm_mirror [url] # 卸载 xxx 版本的 nodenvm uninstall xxx # 切换 node 版本nvm use [version] [arch] # 查看 nvm 版本nvm version # 帮助nvm help 参考博文： (30条消息) nodejs环境变量配置及使用n及nvm进行版本切换_ruanhongbiao的专栏-CSDN博客_nvm安装的node环境变量 nvm 安装（macOS）2.1 安装 Homebrew The Missing Package Manager for macOS (or Linux) — Homebrew 12# 安装 Homebrew/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; 安装失败 MacOs M1安装Homebrew 在国内最简单方法_YD-10-NG的博客-CSDN博客 参照上述博文 12# 主机是 intel 芯片/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot; 安装成功 2.2 安装 nvm 12# 安装 nvmbrew install nvm 安装成功 2.3 配置可在 shell 中使用 nvm 命令 12345678910# 查看是否存在 ~/.nvm 文件夹cd ~/.nvm # 创建 ~/.nvm 文件夹mkdir ~/.nvm# 查看是否存在 ~/.profile 文件cd ~/.profile# 返回根目录cd ~# 创建 .profile 文件touch .profile 打开并在 .profile 文件中添加如下信息 123export NVM_DIR=&quot;$HOME/.nvm&quot; [ -s &quot;/usr/local/opt/nvm/nvm.sh&quot; ] &amp;&amp; . &quot;/usr/local/opt/nvm/nvm.sh&quot; # This loads nvm [ -s &quot;/usr/local/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;&amp; . &quot;/usr/local/opt/nvm/etc/bash_completion.d/nvm&quot; # This loads nvm bash_completion MAC：通过NVM安装指定版本的node - 简书 参照上述博文，重新 source 1source .profile 2.4 使用 nvm 安装不同版本 node 12345678# 查看远程所有可用的 node 版本nvm ls-remote# 下载想要安装的版本nvm install xxx # nvm install v8.11.3# 使用指定版本的 nodenvm use xxx # nvm use v8.11.3# 每次启动终端都使用该版本的 nodenvm alias default xxx # nvm alias default v8.11.3 2.5 查看版本信息 1234# 查看 node 版本node -v# 查看 npm 版本npm -v 还可以配置在不同 node 版本下全局安装的依赖始终可用，参照下述博文： (12条消息) mac nodejs安装_weixin_30791095的博客-CSDN博客","link":"/2021/12/08/nvm-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"title":"git 常用操作小结","text":"git 配置密钥 SSH Key1.1 首先检查一下用户名和邮箱是否配置 12# 查看全局的 git 配置git config --global --list 若未进行配置，则执行下列命令进行配置 12git config --global user.name &quot;admvli2016&quot;git config --global user.email &quot;3148441341@qq.com&quot; 1.2 然后执行以下命令生成密钥 SSH Key 1ssh-keygen -t rsa -C &quot;3148441341@qq.com&quot; 执行命令后需要进行3次或4次确认： i，确认秘钥的保存路径（如果不需要改路径则直接回车） ii，如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖） iii，创建密码（如果不需要密码则直接回车） iv，确认密码 直接敲3~4次回车即可 生成的 id_rsa 和 id_rsa.pub 文件默认的保存路径是： C:\\Users\\admvli2016.ssh 1.3 打开 id_rsa.pub 文件，将其内容复制 Gitee/GitLab/GitHub/腾讯工蜂 当中 可通过下列命令查看 id_rsa.pub 文件内容 12# 查看 id_rsa.pub 文件内容cat ~/.ssh/id_rsa.pub GitHub 中配置 SSH Gitee 中配置 SSH GitLab 中配置 SSH 腾讯工蜂中配置 SSH 参考博文： git ssh key配置 - 讨厌走开啦 - CSDN博客 利用Git生成本机SSH Key并添加到GitHub中 - 境由心生 - CSDN博客 (1条消息)github上传项目的时候报出git@github.com: Permission denied (publickey). fatal: Could not read from remote repo_weixin_44394753的博客-CSDN博客 git 查看 &amp; 设置用户名、用户邮箱2.1 git 查看当前用户名、用户邮箱 1234# 查看当前用户名git config user.name# 查看当前邮箱地址git config user.email 2.2 git 设置用户名、用户邮箱 1234567# 全局级配置，如果没有仓库级别的特殊配置，默认读取这个配置git config --global user.name &quot;name&quot;git config --global user.email &quot;email&quot;# 仓库级配置，一般一个项目配置一次git config user.name &quot;name&quot;git config user.email &quot;email&quot; 参考博文： GIT 查看/修改用户名和邮箱地址 - 程序园 git 创建本地仓库，与远程仓库关联123456789101112131415161718192021222324252627# 1，初始化本地仓库git init# 2，在 gitee/gitlab/github 上新建仓库# 新建的远程仓库地址： git@gitee.com:admvli2016/git-test.git# 查看本地关联的远程仓库地址git remote -v# 3，若本地已有关联的远程仓库，则会报错：'fatal:remote origin already exists'# 移除已有的远程仓库地址，再添加git remote remove origin# 4，添加新建的远程仓库地址git remote add origin git@gitee.com:admvli2016/git-test.git# 5，初次提交# 添加文件git add .# commit 提交git commit -m &quot;备注&quot;# 将本地分支 master 内容推送到远程仓库去# 第一次推送 master 分支时，加上了 –u 参数# 此时，git 不但会把本地的 master 分支内容推送到远程新的 master 分支上，还会把本地的 master 分支与远程的 master 分支关联起来git push -u origin master 或者 123# 1，在 gitee/gitlab/github 上新建仓库时选择初始化仓库# 2，然后使用 git clone &quot;xxx(刚才新建的远程仓库地址)&quot;，如下所示，也可将本地仓库与远程仓库关联起来git clone git@gitee.com:admvli2016/git-test.git 参考博文： git基础知识（一）之把本地仓库推送到github - 简书 使用git将本地项目推送到远程仓库github - 简书 将本地文件夹添加到Git仓库 - 坚守梦想 - 博客园 (1条消息)Git将本地文件夹添加到远程仓库_StarFishing-CSDN博客 git将本地文件上传到远程github仓库中丶Java教程网-IT开发者们的技术天堂 Git关联远程仓库 - 冬音 - 博客园 git报错：’fatal:remote origin already exists’怎么处理？附上git常用操作以及说明。 - leaf+ - 博客园 (5条消息) git仓库更换远程地址_IT水很深，路还很长-CSDN博客 git remote 命令 菜鸟教程 git 创建本地分支，推送至远程仓库12345# 1，本地新建分支# git branch xxx &amp;&amp; git checkout xxxgit checkout -b xxx# 2，将本地分支推送至远程仓库git push -u origin xxx git clone 拉下来的远程仓库代码一般都处于主分支上，如何切换至其他分支123456789101112# 1, 拉取远程仓库代码git clone git@git.code.tencent.com:sgc-ins-os/ui-app.git# 2, 创建并切换到 sg8k 分支# git branch sg8k &amp;&amp; git checkout sg8kgit checkout -b sg8k# 3, 将远程 sg8k 分支设为本地 sg8k 分支的上游分支git branch --set-upstream-to=origin/sg8k sg8k# 4, 拉取代码git pull 参考博文: (7条消息) 如何拉取 GitLab 上指定分支的内容？（附常用 git 命令）_Bule_daze的博客-CSDN博客_git怎么pull分支上的内容 git 下载远程仓库指定分支的代码12# 下载远程仓库 dev 分支上的代码git clone -b dev git@gitee.com:admvli2016/git-test.git 参考博文： 通过git命令行从github上下载指定branch的项目源码 - zhang168w520的博客 - CSDN博客 git 常规提交流程 &amp; 注释规范7.1 git 常规提交流程 1234567891011# 1，添加修改git add . || git add *# 2，commit 提交git commit -m &quot;备注&quot; || git commit -am &quot;备注&quot;# 3，拉取其他开发人员的更新内容git pull# 4，推送到远程分支git push 7.2 git 注释规范 注释开头 含义 feat 新功能的开发 fix 测试提的 bug 修复；开发过程中已开发功能发现的问题的修复（对测试提的 bug 需在注释末尾写明 Bug ID） docs 文档类修改 style 格式化、分号增删等修改，代码没有变动 refactor 代码重构：同样的功能点，只是逻辑上重构了该功能的编码实现 chore 依赖包升级，代码迁移、初始化、覆盖等，业务代码没变动 备注：1、举例，提交时注释 git commit -m “feat: 轨迹图找点功能” git commit -m “fix: 修复轨迹图XX问题” git stash 暂存修改123456789101112131415161718192021222324252627282930# 添加文件git add . || git add *# 将当前所有修改内容(未提交的)暂存，此时代码回到上一次的提交git stash# 列出所有暂存项git stash list# 删除队列中某一暂存项git stash drop stash@{0} # 删除最近的暂存项git stash drop stash@{1} # 删除第二近的暂存项git stash drop stash@{2} # 删除第三近的暂存项# 依此类推# 清除所有暂存项git stash clear# 将暂存的修改重新应用，可以看到以前暂存的修改又回来了git stash apply# 应用队列中某一暂存项git stash apply stash@{0} # 应用最近的暂存项git stash apply stash@{1} # 应用第二近的暂存项git stash apply stash@{2} # 应用第三近的暂存项# 依此类推 # 恢复暂存的修改，同时删除 stash 记录# git stash apply stash@{0} &amp;&amp; git stash drop stash@{0}git stash pop 参考博文： (5条消息) git stash暂存修改_大掌教的Cocos Creator研究院-CSDN博客 (2条消息) git 删除stash 的内容_csdnmuyi的博客-CSDN博客 git 给某次提交打上 tag &amp; 删除 tag9.1 打上 tag 1234567891011121314151617181920# 打上 tag 流程git add *git commit -am &quot;xxx&quot;# git pull 不仅会同步修改的内容还会同步 tagsgit pull# 只提交修改的内容，不会提交 taggit push # 给最近的提交打上 taggit tag v1.1.x # 只提交 tags，不会提交修改的内容# 会跟远程的 tags 进行比较，将所有新增的 tags 都推送到远程git push --tags # 只提交 tag，不会提交修改的内容# 将具体的某一个 tag 推送至远程git push origin v1.1.0 git push 是不包含 tag 的；如果想包含可以在 push 时加上 –tags 参数，但是此时只会提交 tag，不会提交修改的内容 git push –tags 与 git push origin v1.1.0 的区别在于 git push –tags 会跟远程的 tags 进行比较，将所有新增的 tags 都推送至远程（增量更新） git pull 不仅会同步修改的内容还会同步 tags 9.2 删除 tag 123# 移除 taggit tag -d v1.1.x # 删除本地 taggit push origin :refs/tags/v1.1.x # 删除远程 tag 参考博文： Git - 打标签 git 打tag标签_倒骑驴走着瞧的博客-CSDN博客_git打tag git删除tag - 极_地 - 博客园 git cherry-pick 将一个分支上的某些提交应用到另一个分支1234567891011121314151617181920212223242526272829# 切换到想要应用修改的分支 xxxgit checkout xxx# 应用一个分支的某一个提交到 xxx 分支git cherry-pick &lt;commit-id&gt;# 应用一个分支的多个提交到 xxx 分支，提交之间使用空格分隔git cherry-pick &lt;commit-id1&gt; &lt;commit-id2&gt; &lt;commit-id3&gt; ...# 应用一个分支中连续的多个提交到 xxx 分支# 此语法对应的操作区间是左开右闭，不包含 start-commit-id# 另外要注意这两个commit 之间要求有连续关系的，并且前者要在后者之前，顺序不能颠倒git cherry-pick &lt;start-commit-id&gt;..&lt;end-commit-id&gt;# 应用一个分支中连续的多个提交到 xxx 分支# 此语法对应的操作区间是闭区间，包含 start-commit-idgit cherry-pick &lt;start-commit-id&gt;^..&lt;end-commit-id&gt;# 应用该分支最近的提交到 xxx 分支git cherry-pick &lt;branch-name&gt;# cherry-pick 其它命令# 当 cherry-pick 多个提交时，假设遇到冲突：# --continue 继续进行下一个# --quit 结束 cherry-pick 操作，但是不会影响冲突之前多个提交中已经成功的# --abort 直接打回原形，回到 cherry-pick 前的状态，包括多个提交中已经成功的git cherry-pick --continue git cherry-pick --quit git cherry-pick --abort 参考博文： (5条消息) Git-用 cherry-pick 挑好看的小樱桃_段浅浅的博客-CSDN博客_git pick-cherry (2条消息) Git：cherry-pick应用一个分支某些现有提交，到另外一个分支_琦彦-CSDN博客 git 删除远程分支上的某次提交只讨论最简单也是最常用的一种情形： 删除最后一次提交（远程仓库版本回滚要提醒其它开发人员保存好自己本地的修改内容） 有两种方式 revert 和 reset 12345678910# revert 方式# 备份最后一次提交的内容git branch xxx # 从当前分支切一个新分支# 放弃指定提交的修改内容，但是会生成一次新的提交，需要填写提交注释，以前的提交记录都在# 放弃最后一次提交git revert HEAD# 将生成的新提交 commit 推送到远程git push 12345678910# reset 方式# 备份最后一次提交的内容git branch xxx # 从当前分支切一个新分支# 将 HEAD 指针指到指定提交，历史记录中不会出现放弃的提交记录# 让 HEAD 指针回到上一次的提交commit，即放弃最后一次提交git reset --hard HEAD^ || git reset --hard HEAD~1# reset 之后本地库落后于远程库一个版本，因此需要强制提交 -fgit push -f 参考博文： (2条消息) git 删除远程分支上的某次提交_张小强的专栏-CSDN博客_git删除远程某次提交 Git删除master branch中最近一次的提交 - 新西兰程序员 - 博客园 git 删除本地分支上的某次提交不讨论特别复杂的情况，仅考虑删除最后一次提交 12# 删除最后一次的提交记录，但是还保留提交所做的更改git reset --soft HEAD^ || git reset --soft HEAD~1 12# 删除最后一次的提交记录，并且不保留提交所做的更改git reset --hard HEAD^ || git reset --hard HEAD~1 参考博文： 【转】Git删除commit提交的log记录 - 程序小工 - 博客园 Git撤销本地commit_K.Sun-CSDN博客_git 删除本地commit git branch 删除分支 &amp; 恢复分支13.1 查看所有分支 12# 查看所有分支git branch -a 13.2 删除与恢复本地分支 1234567891011# 查看本地分支列表git branch# 删除本地分支git branch -d xxx # 删除不是当前分支的其它分支git branch -D xxx # 强制删除当前分支 # 恢复本地分支# 查找被删除分支的 commmit-idgit reflog# 恢复被删除的分支git branch xxx commit-id 13.3 删除本地的remotes分支 1234# 查看所有分支git branch -a# 删除本地的remotes分支git branch -r -d origin/xxx 13.4 删除远程分支 1234# 查看远程分支列表git branch -r# 删除远程分支git push origin --delete xxx 参考博文： Git删除分支/恢复分支 - uTank - 博客园 (18条消息) git命令行删除远程分支_枫竹梦-CSDN博客 git删除本地分支和远程分支 - 安静的小龙码 - 博客园 git 通过 tag 回退版本修复 bug背景：线上版本出现 bug，需要紧急修复这个 bug，然后马上发版本，可是这个时候代码的新功能已经开发到一半了，不能回退，遇见这种情况怎么办？ 参见上述博文，步骤如下： 14.1 当前分支回退到打 tag 的那次提交，比如回到 tag v1.0 对应的那次提交 获取 tag v1.0 对应的那次提交的 commit-id 1git show v1.0 对应的 commit-id 为 16c0866879541a489c83532ccbe7926984ad46d0 这一步也可以通过 Git Graph 等工具直接查看 回退到打 tag 的那次提交 1git reset --hard 16c0866879541a489c83532ccbe7926984ad46d0 14.2 创建新分支 xxx，备份当前内容 12# 创建新分支 xxxgit branch xxx 14.3 当前分支立即回到最近的一次提交 通过 git reflog 查看当前分支最近一次提交对应的 commit-id 12# 查看最近一次提交的 commit-idgit reflog 同样也可以通过 Git Graph 等工具查看当前分支最近一次提交的 commit-id 对应的 commit-id 为 271aa56c58ad00c8768e83b515f693f22ff2fe28 12# 回到最近一次提交git reset --hard 271aa56c58ad00c8768e83b515f693f22ff2fe28 14.4 切换到 xxx 分支，修改 bug，发版本，打新 tag 12# 切换到 xxx 分支git checkout xxx 注意这里的发版本是指开发人员自己发版，配置 nginx 等 1234# 修改完后打 tag git add *git commit -am &quot;fix: xxx&quot;git tag v1.4 // 打上新 tag 14.5 将 xxx 分支合并到主干 1234# 切换到 master 分支git checkout master# 将 xxx 分支合并到主干git merge xxx 有冲突处理冲突，再次提交 1234git add *git commit -am &quot;合并冲突&quot;git pullgit push 14.6 推送新 tag 到远程仓库 12# 将新 tag 推送至远程仓库git push --tags || git push origin v1.4 如此通过 tag 回退版本修复 bug 的整个流程就完成了，可继续保留本地分支 xxx ，以防需要再次进行修改 参考博文： Git高级教程 (一)] 通过Tag标签回退版本修复bug_梧桐那时雨-CSDN博客_git通过tag回退 git 恢复 git reset –hard xxx 之前的 commit-id 对应的内容与 14 不同，15 在 git reset –hard commit-id 操作之后，在当前分支上进行了修改 步骤如下： 15.1 暂存当前修改的内容 12# 暂存修改的内容git stash 15.2 使用 git reflog 或者查看 .git/logs/refs/heads/branch_name 文件找到想要回去的 commit-id 执行命令 git reflog 文件路径： .git/logs/refs/heads/branch_name 15.3 新建分支，恢复 git reset –hard 之前的 commit-id 对应的内容 12# 新建分支 branch_name，恢复 commit-id 对应的内容git checkout commit-id -b branch_name 参考博文： git reset –hard 回滚以后 以后怎么再回去？ - SegmentFault 思否 恢复git reset –hard之前的commit号 - HappyMrSpring - CSDN博客 版本回退 - 廖雪峰的官方网站","link":"/2021/12/07/git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%B0%8F%E7%BB%93/"},{"title":"自适应布局","text":"自适应布局实现有多种方式，下面仅列举我使用过的几种 一般而言，自适应布局常在PC端上应用，常常给html元素设置一个最小显示宽度 min-width，小于这个宽度部分元素被遮挡住（设置了overflow:hidden）或者浏览器底部出现横向滚动条。 CSS3 zoom 属性 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!-- index.html --&gt;&lt;!-- 运行结果: firefox 不能缩放、edge、chrome 可以缩放 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://necolas.github.io/normalize.css/latest/normalize.css&quot;&gt; &lt;title&gt;CSS ZOOM&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=&quot;height: 500px; width: 500px; background-color: black;&quot;&gt;&lt;/div&gt; &lt;script&gt; // js 部分代码如下 // 初始化 window.onload = function () { document.body.style.zoom = 'normal'; // 避免 zoom 尺寸叠加 let ratio = document.body.clientWidth / 1904; document.body.style.zoom = ratio; }; // 函数防抖 (function () { var throttle = function (type, name, obj) { obj = obj || window; var running = false; var func = function () { if (running) { return; } running = true; requestAnimationFrame(function () { obj.dispatchEvent(new CustomEvent(name)); running = false; }); }; obj.addEventListener(type, func); }; // 初始化 - 可以初始化任何事件 throttle('resize', 'optimizedResize'); })(); window.addEventListener('optimizedResize', function () { document.body.style.zoom = 'normal'; let ratio = document.body.clientWidth / 1904; document.body.style.zoom = ratio; }); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; CSS3 transform:scale() 方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!-- index.html --&gt;&lt;!-- 运行结果: firefox 、edge、chrome 都可以缩放 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://necolas.github.io/normalize.css/latest/normalize.css&quot;&gt; &lt;title&gt;CSS SCALE&lt;/title&gt; &lt;/head&gt; &lt;!-- 缩放原点 --&gt; &lt;body style=&quot;transform-origin: 0 0;&quot;&gt; &lt;div style=&quot;height: 500px; width: 500px; background-color: black;&quot;&gt;&lt;/div&gt; &lt;script&gt; // js 部分代码如下 // 初始化 window.onload = function () { let radio = document.body.clientWidth / 1904; document.body.style.transform = `scale(${radio},${radio})` }; // 函数防抖 (function () { var throttle = function (type, name, obj) { obj = obj || window; var running = false; var func = function () { if (running) { return; } running = true; requestAnimationFrame(function () { obj.dispatchEvent(new CustomEvent(name)); running = false; }); }; obj.addEventListener(type, func); }; // 初始化 - 可以初始化任何事件 throttle('resize', 'optimizedResize'); })(); window.addEventListener('optimizedResize', function () { let radio = document.body.clientWidth / 1904; document.body.style.transform = `scale(${radio},${radio})` }); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; JS 计算缩放比例，对指定元素的布局属性按照缩放比例重新赋值用途不是很广泛，可用于对方案1和方案2中不随整体自适应的元素单独处理 12345678910111213let ratio = document.body.clientWidth / 1904;let element = document.getElementById('element');element.style.height = Math.round(618 * ratio) + 'px';element.style.width = Math.round(1365 * ratio) + 'px';element.style.marginTop = Math.round(-30 * ratio) + 'px';element.style.marginLeft = Math.round(65 * ratio) + 'px';// element 元素在 1920*1080 分辨率时的布局属性如下：// {// height: 618px;// width: 1365px;// margin-top: -30px;// margin-left: 65px;// } OminiBrowser 项目使用的自适应布局方式（兼容不同浏览器）因为这个项目是自己早期做的，存在很多疏漏，这里仅用作于参照这里当时并不知道 transform: scale() 可以兼容大多数浏览器；不过有一点值得注意的是：使用transform: scale() 进行缩放，会在 ie、edge 浏览器右侧和底部产品大片空白，这里使用了一些技巧进行处理，如设置overflow-x: hidden、计算出来的高度乘以0.9等 该方案结合了方案1和2，可兼容大部分浏览器，但是对于引入的 Element UI、vis 等插件会有影响，比如 el-select下拉框位置漂移、图表不跟随此逻辑缩放等，这些问题需要自己再去做兼容处理 123456&lt;!-- index.html --&gt;&lt;body style=&quot;transform-origin: 0 0;&quot;&gt; &lt;script type=&quot;text/javascript&quot;&gt; // js 部分代码如下 &lt;/script&gt;&lt;/body&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556var client = (function () { // 呈现引擎 var engine = { ie: 0, edge: 0, gecko: 0, webkit: 0, khtml: 0, opera: 0 }; // 检测呈现引擎、平台和设备 var ua = navigator.userAgent; // 通过检测用户代理字符串 if (window.opera) { engine.opera = parseFloat(engine.ver); } else if (/AppleWebKit\\/(\\S+)/.test(ua) &amp;&amp; ua.indexOf('Edge/') === -1) { engine.webkit = parseFloat(engine.ver); } else if (/KHTML\\/(\\S+)/.test(ua) &amp;&amp; ua.indexOf('Edge/') === -1) { engine.khtml = parseFloat(engine.ver); } else if (/rv:([^)]+)\\) Gecko\\/\\d{8}/.test(ua) &amp;&amp; ua.indexOf('Edge/') === -1) { engine.gecko = parseFloat(engine.ver); } else if (!!window.ActiveXObject || 'ActiveXObject' in window) { engine.ie = parseFloat(engine.ver); } else if (ua.indexOf('Edge/') !== -1) { engine.edge = parseFloat(engine.ver); } return engine;})();// 1920 这里也并没有去掉滚动条的宽度，正确的宽度应该是 1920 - 16 = 1904// screen.width 取的是屏幕的像素宽度，等同于 window.screen.widthvar zoomRatio = 1920 / screen.width; Object.keys(client).forEach(function (key) { if (client[key] !== 0) { if (key === 'webkit') { // chrome, safari document.documentElement.style.zoom = 1 / zoomRatio; } else if (key === 'ie') { // ie document.body.style.zoom = 1 / zoomRatio; document.body.style.width = 100 * zoomRatio + '%'; // 设置为 0.9，是考虑到浏览器导航栏、书签栏的高度以及操作系统底部任务栏的高度，页面实际的高度并没有 1080 document.body.style.height = 0.9 * (1080 / zoomRatio) + 'px'; // 设置 body 的高度 document.documentElement.style.height = 0.9 * (1080 / zoomRatio) + 'px'; // 设置 html 元素的高度 document.documentElement.style.overflowX = 'hidden'; // 设置横向溢出隐藏 } else if (key === 'edge') { // edge document.body.style.zoom = 1 / zoomRatio; document.documentElement.style.height = 0.9 * (1080 / zoomRatio) + 'px'; document.documentElement.style.overflowX = 'hidden'; } else if (key === 'gecko') { // firefox document.body.style.transform = 'scale(' + 1 / zoomRatio + ',' + 1 / zoomRatio + ')'; document.body.style.width = 100 * zoomRatio + '%'; document.documentElement.style.height = 0.9 * (1080 / zoomRatio) + 'px'; } }}); rem 布局 rem 布局的关键点在于 html { font-size: 1vw } 即将 html 元素的 font-size 设置为 1vw，因为 rem 是基于页面根元素（即 html 元素）的 font-size 计算的，默认情况下，1rem = html 的 font-size 值；在这里就是 1rem = 1vw，因此当视宽 vw 发生变化时，以 rem 做单位的元素也会相应的变化 浮动布局与 rem 布局对比浮动布局代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://necolas.github.io/normalize.css/latest/normalize.css&quot;&gt; &lt;title&gt;浮动布局&lt;/title&gt; &lt;style&gt; .box { float: left; width: 400px; margin: 50px 25px; } .box p { width: 100%; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box box1&quot;&gt; &lt;p&gt; 1，软件部培训总结撰写 √ 已完成 2，自己笔记本shenguyun文件夹整理 √ 已完成 3，面试经验总结（最后一个）√ 已完成 4，将各项目需要在53上面发版的步骤总结一下 差 Manage 发版内容，等明确了53 Manage 存放的地址加上即可 ui-app-android 项目配置文件路径 5，vivo手机文件同步（需要在同一wifi环境下安装手机驱动） &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;box box2&quot;&gt; &lt;p&gt; 1，总结一下 8 月份暂未完成的任务 √ 已完成 2，自己笔记本上需要下载的东西下载好 公司电脑和自己的笔记本数据同步 1，软件部培训总结撰写 回去再写 √ 已完成 9/5 2，自己笔记本shenguyun文件夹整理 √ 已完成 9/5 3，chrome 书签备份 √ 4，公司文件夹shenguyun同步 √ 3，面试经验总结（最后一个）√ 已完成 9/5 4，浏览器书签内容整理 5，将各项目需要在53上面发版的步骤总结一下 &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;box box3&quot;&gt; &lt;p&gt; 苹果应用市场审核意见：您的应用程序使用第三方登录服务，但不提供Apple登录。使用第三方登录服务进行帐户身份验证的应用程序需要向用户提供使用Apple登录的同等选项。 下一步请修改您的应用程序，以提供与Apple登录作为帐户身份验证的等效选项。 将微信登陆按钮隐藏后去审核，审核通过之后，通过热更新将按钮换回来 上架审核时，可以给界面上的微信登录按钮 设置一个定时器里面设置微信登录按钮隐藏，以便通过审核 &lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 页面表现如下： 1366x768 1200x473 1080x473 ipad pro 1024x1366 960x473 ipad 768X1024 iphone6/7/8/plus 414x736 rem 布局代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://necolas.github.io/normalize.css/latest/normalize.css&quot;&gt; &lt;title&gt;rem 自适应布局&lt;/title&gt; &lt;style&gt; html { font-size: 1vw; } .box { float: left; width: 29rem; margin: 4rem 2rem 0rem 2rem; } .box p { width: 100%; /* font-size: 1rem; */ /* 继承了html元素的font-size值 大致为 13.66px */ } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box box1&quot;&gt; &lt;p&gt; 1，软件部培训总结撰写 √ 已完成 2，自己笔记本shenguyun文件夹整理 √ 已完成 3，面试经验总结（最后一个）√ 已完成 4，将各项目需要在53上面发版的步骤总结一下 差 Manage 发版内容，等明确了53 Manage 存放的地址加上即可 ui-app-android 项目配置文件路径 5，vivo手机文件同步（需要在同一wifi环境下安装手机驱动） &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;box box2&quot;&gt; &lt;p&gt; 1，总结一下 8 月份暂未完成的任务 √ 已完成 2，自己笔记本上需要下载的东西下载好 公司电脑和自己的笔记本数据同步 1，软件部培训总结撰写 回去再写 √ 已完成 9/5 2，自己笔记本shenguyun文件夹整理 √ 已完成 9/5 3，chrome 书签备份 √ 4，公司文件夹shenguyun同步 √ 3，面试经验总结（最后一个）√ 已完成 9/5 4，浏览器书签内容整理 5，将各项目需要在53上面发版的步骤总结一下 &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;box box3&quot;&gt; &lt;p&gt; 苹果应用市场审核意见：您的应用程序使用第三方登录服务，但不提供Apple登录。使用第三方登录服务进行帐户身份验证的应用程序需要向用户提供使用Apple登录的同等选项。 下一步请修改您的应用程序，以提供与Apple登录作为帐户身份验证的等效选项。 将微信登陆按钮隐藏后去审核，审核通过之后，通过热更新将按钮换回来 上架审核时，可以给界面上的微信登录按钮 设置一个定时器里面设置微信登录按钮隐藏，以便通过审核 &lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 1366x768 1200x473 1080x473 ipad pro 1024x1366 960x473 ipad 768X1024 iphone6/7/8/plus 414x736 对比效果很明显，rem 布局在自适应上更具优势","link":"/2021/12/05/%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/"}],"tags":[{"name":"Ionic5.x","slug":"Ionic5-x","link":"/tags/Ionic5-x/"},{"name":"Capacitor","slug":"Capacitor","link":"/tags/Capacitor/"},{"name":"Vue3.x","slug":"Vue3-x","link":"/tags/Vue3-x/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"极光推送","slug":"极光推送","link":"/tags/%E6%9E%81%E5%85%89%E6%8E%A8%E9%80%81/"},{"name":"nvm","slug":"nvm","link":"/tags/nvm/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"布局方式","slug":"布局方式","link":"/tags/%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/"},{"name":"HTML&amp;&amp;CSS","slug":"HTML-CSS","link":"/tags/HTML-CSS/"}],"categories":[{"name":"移动端开发","slug":"移动端开发","link":"/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"前端工程化","slug":"前端工程化","link":"/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"},{"name":"代码版本管理","slug":"代码版本管理","link":"/categories/%E4%BB%A3%E7%A0%81%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"},{"name":"前端基础","slug":"前端基础","link":"/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"}]}