{"pages":[],"posts":[{"title":"git 常用操作小结","text":"git 配置密钥 SSH Key参考博文： git ssh key配置 - 讨厌走开啦 - CSDN博客 利用Git生成本机SSH Key并添加到GitHub中 - 境由心生 - CSDN博客 (1条消息)github上传项目的时候报出git@github.com: Permission denied (publickey). fatal: Could not read from remote repo_weixin_44394753的博客-CSDN博客 首先检查一下用户名和邮箱是否配置 12# 查看全局的 git 配置git config --global --list 若未进行配置，则执行下列命令进行配置 12git config --global user.name &quot;admvli2016&quot;git config --global user.email &quot;3148441341@qq.com&quot; 然后执行以下命令生成密钥 SSH Key 1ssh-keygen -t rsa -C &quot;3148441341@qq.com&quot; 执行命令后需要进行3次或4次确认： i，确认秘钥的保存路径（如果不需要改路径则直接回车） ii，如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖） iii，创建密码（如果不需要密码则直接回车） iv，确认密码 直接敲3~4次回车即可 生成的 id_rsa 和 id_rsa.pub 文件默认的保存路径是： C:\\Users\\admvli2016.ssh 打开 id_rsa.pub 文件，将其内容复制 Gitee/GitLab/GitHub/腾讯工蜂 当中 可通过下列命令查看 id_rsa.pub 文件内容 12# 查看 id_rsa.pub 文件内容cat ~/.ssh/id_rsa.pub GitHub 中配置 SSH Gitee 中配置 SSH GitLab 中配置 SSH 腾讯工蜂中配置 SSH git 查看 &amp; 设置用户名、用户邮箱参考博文： GIT 查看/修改用户名和邮箱地址 - 程序园 git 查看当前用户名、用户邮箱 1234# 查看当前用户名git config user.name# 查看当前邮箱地址git config user.email git 设置用户名、用户邮箱 1234567# 全局级配置，如果没有仓库级别的特殊配置，默认读取这个配置git config --global user.name &quot;name&quot;git config --global user.email &quot;email&quot;# 仓库级配置，一般一个项目配置一次git config user.name &quot;name&quot;git config user.email &quot;email&quot; git 创建本地仓库，与远程仓库关联参考博文： git基础知识（一）之把本地仓库推送到github - 简书 使用git将本地项目推送到远程仓库github - 简书 将本地文件夹添加到Git仓库 - 坚守梦想 - 博客园 (1条消息)Git将本地文件夹添加到远程仓库_StarFishing-CSDN博客 git将本地文件上传到远程github仓库中丶Java教程网-IT开发者们的技术天堂 Git关联远程仓库 - 冬音 - 博客园 git报错：’fatal:remote origin already exists’怎么处理？附上git常用操作以及说明。 - leaf+ - 博客园 (5条消息) git仓库更换远程地址_IT水很深，路还很长-CSDN博客 git remote 命令 菜鸟教程 123456789101112131415161718192021222324252627# 1，初始化本地仓库git init# 2，在 gitee/gitlab/github 上新建仓库# 新建的远程仓库地址： git@gitee.com:admvli2016/git-test.git# 查看本地关联的远程仓库地址git remote -v# 3，若本地已有关联的远程仓库，则会报错：'fatal:remote origin already exists'# 移除已有的远程仓库地址，再添加git remote remove origin# 4，添加新建的远程仓库地址git remote add origin git@gitee.com:admvli2016/git-test.git# 5，初次提交# 添加文件git add .# commit 提交git commit -m &quot;备注&quot;# 将本地分支 master 内容推送到远程仓库去# 第一次推送 master 分支时，加上了 –u 参数# 此时，git 不但会把本地的 master 分支内容推送到远程新的 master 分支上，还会把本地的 master 分支与远程的 master 分支关联起来git push -u origin master 或者 123# 1，在 gitee/gitlab/github 上新建仓库时选择初始化仓库# 2，然后使用 git clone &quot;xxx(刚才新建的远程仓库地址)&quot;，如下所示，也可将本地仓库与远程仓库关联起来git clone git@gitee.com:admvli2016/git-test.git git 创建本地分支，推送至远程仓库12345# 1，本地新建分支# git branch xxx &amp;&amp; git checkout xxxgit checkout -b xxx# 2，将本地分支推送至远程仓库git push -u origin xxx git clone 拉下来的远程仓库代码一般都处于主分支上，如何切换至其他分支参考博文: (7条消息) 如何拉取 GitLab 上指定分支的内容？（附常用 git 命令）_Bule_daze的博客-CSDN博客_git怎么pull分支上的内容 123456789101112# 1, 拉取远程仓库代码git clone git@git.code.tencent.com:sgc-ins-os/ui-app.git# 2, 创建并切换到 sg8k 分支# git branch sg8k &amp;&amp; git checkout sg8kgit checkout -b sg8k# 3, 将远程 sg8k 分支设为本地 sg8k 分支的上游分支git branch --set-upstream-to=origin/sg8k sg8k# 4, 拉取代码git pull git 下载远程仓库指定分支的代码参考博文： 通过git命令行从github上下载指定branch的项目源码 - zhang168w520的博客 - CSDN博客 12# 下载远程仓库 dev 分支上的代码git clone -b dev git@gitee.com:admvli2016/git-test.git git 常规提交流程 &amp; 注释规范 git 常规提交流程 1234567891011# 1，添加修改git add . || git add *# 2，commit 提交git commit -m &quot;备注&quot; || git commit -am &quot;备注&quot;# 3，拉取其他开发人员的更新内容git pull# 4，推送到远程分支git push git 注释规范 注释开头 含义 feat 新功能的开发 fix 测试提的 bug 修复；开发过程中已开发功能发现的问题的修复（对测试提的 bug 需在注释末尾写明 Bug ID） docs 文档类修改 style 格式化、分号增删等修改，代码没有变动 refactor 代码重构：同样的功能点，只是逻辑上重构了该功能的编码实现 chore 依赖包升级，代码迁移、初始化、覆盖等，业务代码没变动 备注：1、举例，提交时注释 git commit -m “feat: 轨迹图找点功能” git commit -m “fix: 修复轨迹图XX问题” git stash 暂存修改参考博文： (5条消息) git stash暂存修改_大掌教的Cocos Creator研究院-CSDN博客 (2条消息) git 删除stash 的内容_csdnmuyi的博客-CSDN博客 123456789101112131415161718192021222324252627282930# 添加文件git add . || git add *# 将当前所有修改内容(未提交的)暂存，此时代码回到上一次的提交git stash# 列出所有暂存项git stash list# 删除队列中某一暂存项git stash drop stash@{0} # 删除最近的暂存项git stash drop stash@{1} # 删除第二近的暂存项git stash drop stash@{2} # 删除第三近的暂存项# 依此类推# 清除所有暂存项git stash clear# 将暂存的修改重新应用，可以看到以前暂存的修改又回来了git stash apply# 应用队列中某一暂存项git stash apply stash@{0} # 应用最近的暂存项git stash apply stash@{1} # 应用第二近的暂存项git stash apply stash@{2} # 应用第三近的暂存项# 依此类推 # 恢复暂存的修改，同时删除 stash 记录# git stash apply stash@{0} &amp;&amp; git stash drop stash@{0}git stash pop git 给某次提交打上 tag &amp; 删除 tag参考博文： Git - 打标签 git 打tag标签_倒骑驴走着瞧的博客-CSDN博客_git打tag git删除tag - 极_地 - 博客园 打上 tag 1234567891011121314151617181920# 打上 tag 流程git add *git commit -am &quot;xxx&quot;# git pull 不仅会同步修改的内容还会同步 tagsgit pull# 只提交修改的内容，不会提交 taggit push # 给最近的提交打上 taggit tag v1.1.x # 只提交 tags，不会提交修改的内容# 会跟远程的 tags 进行比较，将所有新增的 tags 都推送到远程git push --tags # 只提交 tag，不会提交修改的内容# 将具体的某一个 tag 推送至远程git push origin v1.1.0 git push 是不包含 tag 的；如果想包含可以在 push 时加上 –tags 参数，但是此时只会提交 tag，不会提交修改的内容 git push –tags 与 git push origin v1.1.0 的区别在于 git push –tags 会跟远程的 tags 进行比较，将所有新增的 tags 都推送至远程（增量更新） git pull 不仅会同步修改的内容还会同步 tags 删除 tag 123# 移除 taggit tag -d v1.1.x # 删除本地 taggit push origin :refs/tags/v1.1.x # 删除远程 tag git cherry-pick 将一个分支上的某些提交应用到另一个分支参考博文： (5条消息) Git-用 cherry-pick 挑好看的小樱桃_段浅浅的博客-CSDN博客_git pick-cherry (2条消息) Git：cherry-pick应用一个分支某些现有提交，到另外一个分支_琦彦-CSDN博客 1234567891011121314151617181920212223242526272829# 切换到想要应用修改的分支 xxxgit checkout xxx# 应用一个分支的某一个提交到 xxx 分支git cherry-pick &lt;commit-id&gt;# 应用一个分支的多个提交到 xxx 分支，提交之间使用空格分隔git cherry-pick &lt;commit-id1&gt; &lt;commit-id2&gt; &lt;commit-id3&gt; ...# 应用一个分支中连续的多个提交到 xxx 分支# 此语法对应的操作区间是左开右闭，不包含 start-commit-id# 另外要注意这两个commit 之间要求有连续关系的，并且前者要在后者之前，顺序不能颠倒git cherry-pick &lt;start-commit-id&gt;..&lt;end-commit-id&gt;# 应用一个分支中连续的多个提交到 xxx 分支# 此语法对应的操作区间是闭区间，包含 start-commit-idgit cherry-pick &lt;start-commit-id&gt;^..&lt;end-commit-id&gt;# 应用该分支最近的提交到 xxx 分支git cherry-pick &lt;branch-name&gt;# cherry-pick 其它命令# 当 cherry-pick 多个提交时，假设遇到冲突：# --continue 继续进行下一个# --quit 结束 cherry-pick 操作，但是不会影响冲突之前多个提交中已经成功的# --abort 直接打回原形，回到 cherry-pick 前的状态，包括多个提交中已经成功的git cherry-pick --continue git cherry-pick --quit git cherry-pick --abort git 删除远程分支上的某次提交参考博文： (2条消息) git 删除远程分支上的某次提交_张小强的专栏-CSDN博客_git删除远程某次提交 Git删除master branch中最近一次的提交 - 新西兰程序员 - 博客园 只讨论最简单也是最常用的一种情形： 删除最后一次提交（远程仓库版本回滚要提醒其它开发人员保存好自己本地的修改内容） 有两种方式 revert 和 reset 12345678910# revert 方式# 备份最后一次提交的内容git branch xxx # 从当前分支切一个新分支# 放弃指定提交的修改内容，但是会生成一次新的提交，需要填写提交注释，以前的提交记录都在# 放弃最后一次提交git revert HEAD# 将生成的新提交 commit 推送到远程git push 12345678910# reset 方式# 备份最后一次提交的内容git branch xxx # 从当前分支切一个新分支# 将 HEAD 指针指到指定提交，历史记录中不会出现放弃的提交记录# 让 HEAD 指针回到上一次的提交commit，即放弃最后一次提交git reset --hard HEAD^ || git reset --hard HEAD~1# reset 之后本地库落后于远程库一个版本，因此需要强制提交 -fgit push -f git 删除本地分支上的某次提交参考博文： 【转】Git删除commit提交的log记录 - 程序小工 - 博客园 Git撤销本地commit_K.Sun-CSDN博客_git 删除本地commit 不讨论特别复杂的情况，仅考虑删除最后一次提交 12# 删除最后一次的提交记录，但是还保留提交所做的更改git reset --soft HEAD^ || git reset --soft HEAD~1 12# 删除最后一次的提交记录，并且不保留提交所做的更改git reset --hard HEAD^ || git reset --hard HEAD~1 git branch 删除分支 &amp; 恢复分支参考博文： Git删除分支/恢复分支 - uTank - 博客园 (18条消息) git命令行删除远程分支_枫竹梦-CSDN博客 git删除本地分支和远程分支 - 安静的小龙码 - 博客园 查看所有分支 12# 查看所有分支git branch -a 删除与恢复本地分支 1234567891011# 查看本地分支列表git branch# 删除本地分支git branch -d xxx # 删除不是当前分支的其它分支git branch -D xxx # 强制删除当前分支 # 恢复本地分支# 查找被删除分支的 commmit-idgit reflog# 恢复被删除的分支git branch xxx commit-id 删除本地的remotes分支 1234# 查看所有分支git branch -a# 删除本地的remotes分支git branch -r -d origin/xxx 删除远程分支 1234# 查看远程分支列表git branch -r# 删除远程分支git push origin --delete xxx git 通过 tag 回退版本修复 bug参考博文： Git高级教程 (一)] 通过Tag标签回退版本修复bug_梧桐那时雨-CSDN博客_git通过tag回退 背景：线上版本出现 bug，需要紧急修复这个 bug，然后马上发版本，可是这个时候代码的新功能已经开发到一半了，不能回退，遇见这种情况怎么办？ 参见上述博文，步骤如下： 当前分支回退到打 tag 的那次提交，比如回到 tag v1.0 对应的那次提交 获取 tag v1.0 对应的那次提交的 commit-id 1git show v1.0 对应的 commit-id 为 16c0866879541a489c83532ccbe7926984ad46d0 这一步也可以通过 Git Graph 等工具直接查看 回退到打 tag 的那次提交 1git reset --hard 16c0866879541a489c83532ccbe7926984ad46d0 创建新分支 xxx，备份当前内容 12# 创建新分支 xxxgit branch xxx 当前分支立即回到最近的一次提交 通过 git reflog 查看当前分支最近一次提交对应的 commit-id 12# 查看最近一次提交的 commit-idgit reflog 同样也可以通过 Git Graph 等工具查看当前分支最近一次提交的 commit-id 对应的 commit-id 为 271aa56c58ad00c8768e83b515f693f22ff2fe28 12# 回到最近一次提交git reset --hard 271aa56c58ad00c8768e83b515f693f22ff2fe28 切换到 xxx 分支，修改 bug，发版本，打新 tag 12# 切换到 xxx 分支git checkout xxx 注意这里的发版本是指开发人员自己发版，配置 nginx 等 1234# 修改完后打 tag git add *git commit -am &quot;fix: xxx&quot;git tag v1.4 // 打上新 tag 将 xxx 分支合并到主干 1234# 切换到 master 分支git checkout master# 将 xxx 分支合并到主干git merge xxx 有冲突处理冲突，再次提交 1234git add *git commit -am &quot;合并冲突&quot;git pullgit push 推送新 tag 到远程仓库 12# 将新 tag 推送至远程仓库git push --tags || git push origin v1.4 如此通过 tag 回退版本修复 bug 的整个流程就完成了，可继续保留本地分支 xxx ，以防需要再次进行修改 git 恢复 git reset –hard xxx 之前的 commit-id 对应的内容参考博文： git reset –hard 回滚以后 以后怎么再回去？ - SegmentFault 思否 恢复git reset –hard之前的commit号 - HappyMrSpring - CSDN博客 版本回退 - 廖雪峰的官方网站 与 14 不同，15 在 git reset –hard commit-id 操作之后，在当前分支上进行了修改 步骤如下： 暂存当前修改的内容 12# 暂存修改的内容git stash 使用 git reflog 或者查看 .git/logs/refs/heads/branch_name 文件找到想要回去的 commit-id 执行命令 git reflog 文件路径： .git/logs/refs/heads/branch_name 新建分支，恢复 git reset –hard 之前的 commit-id 对应的内容 12# 新建分支 branch_name，恢复 commit-id 对应的内容git checkout commit-id -b branch_name","link":"/2021/12/07/git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%B0%8F%E7%BB%93/"},{"title":"自适应布局","text":"自适应布局实现有多种方式，下面仅列举我使用过的几种 一般而言，自适应布局常在PC端上应用，常常给html元素设置一个最小显示宽度 min-width，小于这个宽度部分元素被遮挡住（设置了overflow:hidden）或者浏览器底部出现横向滚动条。 CSS3 zoom 属性 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!-- index.html --&gt;&lt;!-- 运行结果: firefox 不能缩放、edge、chrome 可以缩放 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://necolas.github.io/normalize.css/latest/normalize.css&quot;&gt; &lt;title&gt;CSS ZOOM&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=&quot;height: 500px; width: 500px; background-color: black;&quot;&gt;&lt;/div&gt; &lt;script&gt; // js 部分代码如下 // 初始化 window.onload = function () { document.body.style.zoom = 'normal'; // 避免 zoom 尺寸叠加 let ratio = document.body.clientWidth / 1904; document.body.style.zoom = ratio; }; // 函数防抖 (function () { var throttle = function (type, name, obj) { obj = obj || window; var running = false; var func = function () { if (running) { return; } running = true; requestAnimationFrame(function () { obj.dispatchEvent(new CustomEvent(name)); running = false; }); }; obj.addEventListener(type, func); }; // 初始化 - 可以初始化任何事件 throttle('resize', 'optimizedResize'); })(); window.addEventListener('optimizedResize', function () { document.body.style.zoom = 'normal'; let ratio = document.body.clientWidth / 1904; document.body.style.zoom = ratio; }); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; CSS3 transform:scale() 方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!-- index.html --&gt;&lt;!-- 运行结果: firefox 、edge、chrome 都可以缩放 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://necolas.github.io/normalize.css/latest/normalize.css&quot;&gt; &lt;title&gt;CSS SCALE&lt;/title&gt; &lt;/head&gt; &lt;!-- 缩放原点 --&gt; &lt;body style=&quot;transform-origin: 0 0;&quot;&gt; &lt;div style=&quot;height: 500px; width: 500px; background-color: black;&quot;&gt;&lt;/div&gt; &lt;script&gt; // js 部分代码如下 // 初始化 window.onload = function () { let radio = document.body.clientWidth / 1904; document.body.style.transform = `scale(${radio},${radio})` }; // 函数防抖 (function () { var throttle = function (type, name, obj) { obj = obj || window; var running = false; var func = function () { if (running) { return; } running = true; requestAnimationFrame(function () { obj.dispatchEvent(new CustomEvent(name)); running = false; }); }; obj.addEventListener(type, func); }; // 初始化 - 可以初始化任何事件 throttle('resize', 'optimizedResize'); })(); window.addEventListener('optimizedResize', function () { let radio = document.body.clientWidth / 1904; document.body.style.transform = `scale(${radio},${radio})` }); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; JS 计算缩放比例，对指定元素的布局属性按照缩放比例重新赋值用途不是很广泛，可用于对方案1和方案2中不随整体自适应的元素单独处理 12345678910111213let ratio = document.body.clientWidth / 1904;let element = document.getElementById('element');element.style.height = Math.round(618 * ratio) + 'px';element.style.width = Math.round(1365 * ratio) + 'px';element.style.marginTop = Math.round(-30 * ratio) + 'px';element.style.marginLeft = Math.round(65 * ratio) + 'px';// element 元素在 1920*1080 分辨率时的布局属性如下：// {// height: 618px;// width: 1365px;// margin-top: -30px;// margin-left: 65px;// } OminiBrowser 项目使用的自适应布局方式（兼容不同浏览器）因为这个项目是自己早期做的，存在很多疏漏，这里仅用作于参照这里当时并不知道 transform: scale() 可以兼容大多数浏览器；不过有一点值得注意的是：使用transform: scale() 进行缩放，会在 ie、edge 浏览器右侧和底部产品大片空白，这里使用了一些技巧进行处理，如设置overflow-x: hidden、计算出来的高度乘以0.9等 该方案结合了方案1和2，可兼容大部分浏览器，但是对于引入的 Element UI、vis 等插件会有影响，比如 el-select下拉框位置漂移、图表不跟随此逻辑缩放等，这些问题需要自己再去做兼容处理 123456&lt;!-- index.html --&gt;&lt;body style=&quot;transform-origin: 0 0;&quot;&gt; &lt;script type=&quot;text/javascript&quot;&gt; // js 部分代码如下 &lt;/script&gt;&lt;/body&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556var client = (function () { // 呈现引擎 var engine = { ie: 0, edge: 0, gecko: 0, webkit: 0, khtml: 0, opera: 0 }; // 检测呈现引擎、平台和设备 var ua = navigator.userAgent; // 通过检测用户代理字符串 if (window.opera) { engine.opera = parseFloat(engine.ver); } else if (/AppleWebKit\\/(\\S+)/.test(ua) &amp;&amp; ua.indexOf('Edge/') === -1) { engine.webkit = parseFloat(engine.ver); } else if (/KHTML\\/(\\S+)/.test(ua) &amp;&amp; ua.indexOf('Edge/') === -1) { engine.khtml = parseFloat(engine.ver); } else if (/rv:([^)]+)\\) Gecko\\/\\d{8}/.test(ua) &amp;&amp; ua.indexOf('Edge/') === -1) { engine.gecko = parseFloat(engine.ver); } else if (!!window.ActiveXObject || 'ActiveXObject' in window) { engine.ie = parseFloat(engine.ver); } else if (ua.indexOf('Edge/') !== -1) { engine.edge = parseFloat(engine.ver); } return engine;})();// 1920 这里也并没有去掉滚动条的宽度，正确的宽度应该是 1920 - 16 = 1904// screen.width 取的是屏幕的像素宽度，等同于 window.screen.widthvar zoomRatio = 1920 / screen.width; Object.keys(client).forEach(function (key) { if (client[key] !== 0) { if (key === 'webkit') { // chrome, safari document.documentElement.style.zoom = 1 / zoomRatio; } else if (key === 'ie') { // ie document.body.style.zoom = 1 / zoomRatio; document.body.style.width = 100 * zoomRatio + '%'; // 设置为 0.9，是考虑到浏览器导航栏、书签栏的高度以及操作系统底部任务栏的高度，页面实际的高度并没有 1080 document.body.style.height = 0.9 * (1080 / zoomRatio) + 'px'; // 设置 body 的高度 document.documentElement.style.height = 0.9 * (1080 / zoomRatio) + 'px'; // 设置 html 元素的高度 document.documentElement.style.overflowX = 'hidden'; // 设置横向溢出隐藏 } else if (key === 'edge') { // edge document.body.style.zoom = 1 / zoomRatio; document.documentElement.style.height = 0.9 * (1080 / zoomRatio) + 'px'; document.documentElement.style.overflowX = 'hidden'; } else if (key === 'gecko') { // firefox document.body.style.transform = 'scale(' + 1 / zoomRatio + ',' + 1 / zoomRatio + ')'; document.body.style.width = 100 * zoomRatio + '%'; document.documentElement.style.height = 0.9 * (1080 / zoomRatio) + 'px'; } }}); rem 布局 rem 布局的关键点在于 html { font-size: 1vw } 即将 html 元素的 font-size 设置为 1vw，因为 rem 是基于页面根元素（即 html 元素）的 font-size 计算的，默认情况下，1rem = html 的 font-size 值；在这里就是 1rem = 1vw，因此当视宽 vw 发生变化时，以 rem 做单位的元素也会相应的变化 浮动布局与 rem 布局对比浮动布局代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://necolas.github.io/normalize.css/latest/normalize.css&quot;&gt; &lt;title&gt;浮动布局&lt;/title&gt; &lt;style&gt; .box { float: left; width: 400px; margin: 50px 25px; } .box p { width: 100%; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box box1&quot;&gt; &lt;p&gt; 1，软件部培训总结撰写 √ 已完成 2，自己笔记本shenguyun文件夹整理 √ 已完成 3，面试经验总结（最后一个）√ 已完成 4，将各项目需要在53上面发版的步骤总结一下 差 Manage 发版内容，等明确了53 Manage 存放的地址加上即可 ui-app-android 项目配置文件路径 5，vivo手机文件同步（需要在同一wifi环境下安装手机驱动） &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;box box2&quot;&gt; &lt;p&gt; 1，总结一下 8 月份暂未完成的任务 √ 已完成 2，自己笔记本上需要下载的东西下载好 公司电脑和自己的笔记本数据同步 1，软件部培训总结撰写 回去再写 √ 已完成 9/5 2，自己笔记本shenguyun文件夹整理 √ 已完成 9/5 3，chrome 书签备份 √ 4，公司文件夹shenguyun同步 √ 3，面试经验总结（最后一个）√ 已完成 9/5 4，浏览器书签内容整理 5，将各项目需要在53上面发版的步骤总结一下 &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;box box3&quot;&gt; &lt;p&gt; 苹果应用市场审核意见：您的应用程序使用第三方登录服务，但不提供Apple登录。使用第三方登录服务进行帐户身份验证的应用程序需要向用户提供使用Apple登录的同等选项。 下一步请修改您的应用程序，以提供与Apple登录作为帐户身份验证的等效选项。 将微信登陆按钮隐藏后去审核，审核通过之后，通过热更新将按钮换回来 上架审核时，可以给界面上的微信登录按钮 设置一个定时器里面设置微信登录按钮隐藏，以便通过审核 &lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 页面表现如下： 1366x768 1200x473 1080x473 ipad pro 1024x1366 960x473 ipad 768X1024 iphone6/7/8/plus 414x736 rem 布局代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://necolas.github.io/normalize.css/latest/normalize.css&quot;&gt; &lt;title&gt;rem 自适应布局&lt;/title&gt; &lt;style&gt; html { font-size: 1vw; } .box { float: left; width: 29rem; margin: 4rem 2rem 0rem 2rem; } .box p { width: 100%; /* font-size: 1rem; */ /* 继承了html元素的font-size值 大致为 13.66px */ } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box box1&quot;&gt; &lt;p&gt; 1，软件部培训总结撰写 √ 已完成 2，自己笔记本shenguyun文件夹整理 √ 已完成 3，面试经验总结（最后一个）√ 已完成 4，将各项目需要在53上面发版的步骤总结一下 差 Manage 发版内容，等明确了53 Manage 存放的地址加上即可 ui-app-android 项目配置文件路径 5，vivo手机文件同步（需要在同一wifi环境下安装手机驱动） &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;box box2&quot;&gt; &lt;p&gt; 1，总结一下 8 月份暂未完成的任务 √ 已完成 2，自己笔记本上需要下载的东西下载好 公司电脑和自己的笔记本数据同步 1，软件部培训总结撰写 回去再写 √ 已完成 9/5 2，自己笔记本shenguyun文件夹整理 √ 已完成 9/5 3，chrome 书签备份 √ 4，公司文件夹shenguyun同步 √ 3，面试经验总结（最后一个）√ 已完成 9/5 4，浏览器书签内容整理 5，将各项目需要在53上面发版的步骤总结一下 &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;box box3&quot;&gt; &lt;p&gt; 苹果应用市场审核意见：您的应用程序使用第三方登录服务，但不提供Apple登录。使用第三方登录服务进行帐户身份验证的应用程序需要向用户提供使用Apple登录的同等选项。 下一步请修改您的应用程序，以提供与Apple登录作为帐户身份验证的等效选项。 将微信登陆按钮隐藏后去审核，审核通过之后，通过热更新将按钮换回来 上架审核时，可以给界面上的微信登录按钮 设置一个定时器里面设置微信登录按钮隐藏，以便通过审核 &lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 1366x768 1200x473 1080x473 ipad pro 1024x1366 960x473 ipad 768X1024 iphone6/7/8/plus 414x736 对比效果很明显，rem 布局在自适应上更具优势","link":"/2021/12/05/%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/"}],"tags":[{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"布局方式","slug":"布局方式","link":"/tags/%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/"},{"name":"HTML&amp;&amp;CSS","slug":"HTML-CSS","link":"/tags/HTML-CSS/"}],"categories":[{"name":"代码版本管理","slug":"代码版本管理","link":"/categories/%E4%BB%A3%E7%A0%81%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"},{"name":"前端基础","slug":"前端基础","link":"/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"}]}